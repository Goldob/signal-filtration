#+TITLE: Zasady programowania strukturalnego II – projektowanie
#+OPTIONS: toc:nil

+----------------+------------------------------+-------+-------+
|Imiê i nazwisko |Adam Gotlib                   |Grupa  |AR-121 |
+----------------+------------------------------+-------+-------+
|Prowadz¹cy      |Damian Suski                                  |
+----------------+----------------------------------------------+
|Temat projektu  |Filtracja sygna³u w dziedzinie czêstotliwoœci |
+----------------+----------------------------------------------+

* Opis projektu
  Celem projektu jest implementacja algorytmu filtrowania sygna³u w dziedzinie czêstotliwoœci.

  Program wystêpuje w dwóch wersjach: tekstowej oraz graficznej. W pierwszej z nich zak³ada siê minimalistyczn¹ formê,
  zgodn¹ z zasadami [[https://en.wikipedia.org/wiki/Unix_philosophy][Filozofii Unixa]]. Nie przewiduje siê interakcji z u¿ytkownikiem - potrzebne do dzia³ania parametry zostan¹ przekazane
  przy uruchomieniu poprzez argumenty wiersza poleceñ, a od razu po wykonaniu zadania program zakoñczy swoje dzia³anie.

  Wersja graficzna natomiast reaguje na czynnoœci u¿ytkownika oraz umo¿liwia podgl¹d zmodyfikowanego sygna³u przed jego zapisaniem do pliku.

* Opis formatu danych wejœciowych/wyjœciowych
  Program operuje na plikach [[https://en.wikipedia.org/wiki/WAV][Waveform Audio File Format]].

** Dane wejœciowe
   W celu wywo³ania programu, nale¿y podaæ œcie¿kê do pliku z sygna³em wejœciowym, œcie¿kê do zapisania pliku
   po przeprowadzeniu filtracji, wybrany rodzaj filtra oraz parametry dla algorytmu:

   * w przypadku filtru [[https://en.wikipedia.org/wiki/High-pass_filter][górnoprzepustowego]], nale¿y podaæ doln¹ granicê czêstotliwoœci;
   * w przypadku filtru [[https://en.wikipedia.org/wiki/Low-pass_filter][dolnoprzepustowego]], nale¿y podaæ górn¹ granicê czêstotliwoœci;
   * w przypadku filtru [[https://en.wikipedia.org/wiki/Band-pass_filter][œrodkowoprzepustowego]] oraz [[https://en.wikipedia.org/wiki/Band-stop_filter][œrodkowozaporowego]], nale¿y podaæ obie czêstotliwoœci graniczne.

** Dane wyjœciowe
   Rezultatem wykonania programu jest zapisanie przefiltrowanego pliku falowego we wskazanej przez u¿ytkownika lokalizacji.

   Dodatkowo przewiduje siê drukowanie postêpu wykonania programu na strumieñ /STDOUT/.
   W przypadku napotkania b³êdu, jak niepoprawne kodowanie pliku lub niew³aœciwy format parametrów programu,
   w³aœciwa informacja zostanie wydrukowana na /STDERR/, a program zakoñczy wykonywanie z niezerowym kodem wyjœcia.

* Sieæ dzia³añ interfejsu

  Jak opisano wczeœniej, interaktywny interfejs dotyczy jedynie graficznej wersji programu. Jego schemat prezentuje siê nastêpuj¹co:

  #+begin_src plantuml :file interface.png
    start
    repeat
      partition Wczytywanie {
        :Wczytaj œcie¿kê pliku wejœciowego;
        #LightBlue:Wyœwietl oryginalny sygna³;
      }
      #LightGray:Powtórz := tak;
      repeat
        partition Filtracja {
          :Wczytaj parametry algorytmu;
          :PrzeprowadŸ filtracjê sygna³u;
          #LightBlue:Wyœwietl zmodyfikowany sygna³;
        }
        :Akcja u¿ytkownika;
          if (Zapisz?) then (tak)
            partition Zapis {
              :Wczytaj œcie¿kê pliku wyjœciowego;
              :Zapisz plik;
            }
          elseif (Anuluj?) then (tak)
            #LightGray:Powtórz := nie;
          elseif (Zakoñcz?) then (tak)
            end
          else (Powtórz)
          endif;
      repeat while (Powtórz?) is (tak)
  #+end_src
 


* Sieci dzia³añ najwa¿niejszych algorytmów

  Mimo istnienia kilku wariantów filtra, ca³oœæ g³ównego algorytmu mo¿na uproœciæ do nastêpuj¹cej postaci:

  #+begin_src plantuml :file algorithm.png
    start
    :Transofmacja Fouriera;
    :Filtrowanie czêstotliwoœci;
    :Odwrotna transformacja Fouriera;
    end
  #+end_src

  Poszczególne filtry ró¿niæ siê bêd¹ jedynie drugim etapem, czyli sposobem wyboru, które czêstotliwoœci nale¿y wyci¹æ.
